@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title"> Car Customer</h3>
<a href="/Customers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />

@if (Customers == null)
{
    <div class=" alert alert-info">Loading Customer...</div>
}
else
{
    <table class=" table table-responsive">
        <thead>
            <tr>
                <th>Driving License</th>
                <th>Contact Number</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Customer in Customers)
            {
                <tr>
                    <td>@Customer.DrivingLicense</td>
                    <td>
                        <a href="/Customer/view/@Customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Customer/edit/@Customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
               
            }
        </tbody>
    </table>
}
<br />



@code {
    

    private List<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    async Task Delete(int Customerid)
    {
        if (Customers != null)
        {
            var Customer = Customers.First(q => q.Id == Customerid);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Customer: Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{Customerid}");
                await OnInitializedAsync();
            }
        }
    }
}